"""
Mask Operation Inheritance Structure

Other types can be extrapolated from this temporal mask structure (ie, the particle system nodes). 

1. MaskBase (Abstract Base Class)
   - Location: 
   - Inherits from: ABC (Abstract Base Class)
   - Key features:
     - Defines basic structure for all mask operations
     - Provides common methods: pre_process, post_process, start_progress, update_progress, end_progress
     - Defines abstract method: process_mask
     - Implements apply_mask_operation method
   - Abstract methods that must be implemented by subclasses:
     - process_mask
     - main_function

2. TemporalMaskBase (Abstract Base Class)  
   - Location:
   - Inherits from: MaskBase, ABC
   - Key features:
     - Adds temporal-specific inputs (start_frame, end_frame, effect_duration, temporal_easing, palindrome)
     - Implements apply_temporal_mask_operation method
     - Overrides process_mask to delegate to process_single_mask
     - Implements main_function to handle temporal operations
   - Abstract methods that must be implemented by subclasses:
     - process_single_mask

3. Specific Mask Operation Classes (e.g., MaskMorph, MaskTransform)
   - Location: 
   - Inherit from: TemporalMaskBase
   - Key features:
     - Implement process_single_mask method with specific mask operation logic
     - May override main_function if additional processing is needed
     - Define operation-specific inputs

Inheritance Structure:
ABC
 |
 +--> MaskBase (ABC)
       |
       +--> TemporalMaskBase (ABC)
             |
             +--> MaskMorph
             |
             +--> MaskTransform
             |
             +--> (Other temporal mask operations)

Responsibilities:

1. MaskBase:
   - Defines the basic structure for all mask operations
   - Handles progress tracking and reporting
   - Provides pre- and post-processing capabilities
   - Defines the interface for mask processing (process_mask)

2. TemporalMaskBase:
   - Adds temporal functionality to mask operations
   - Handles frame-by-frame processing with temporal effects
   - Provides easing and palindrome capabilities
   - Defines the interface for single frame processing (process_single_mask)

3. Specific Mask Operation Classes:
   - Implement the actual mask processing logic
   - Define operation-specific parameters
   - May provide additional customization of the temporal processing


When creating a new mask operation:
- For non-temporal operations, inherit directly from MaskBase
- For temporal operations, inherit from TemporalMaskBase
- Implement the required abstract methods
- Add any operation-specific inputs and logic

"""



# Summary of the incoming audio object

audio = {
    'waveform': torch.Tensor,  # Shape: (1, 2, num_samples)
    'sample_rate': int  # Typically 44100 Hz
}

# Detailed breakdown:

# 1. 'waveform' key:
#    - Contains the audio data as a PyTorch tensor
#    - Shape: (1, 2, num_samples)
#      - 1: Batch dimension (always 1 in this case)
#      - 2: Number of channels (stereo audio)
#      - num_samples: Number of audio samples (e.g., 38220 in the previous example)
#    - Data type: torch.float32
#    - Value range: Typically between -1.0 and 1.0

# 2. 'sample_rate' key:
#    - Integer representing the number of samples per second
#    - Typically 44100 Hz (CD-quality audio)

# Example usage:
audio_np = audio['waveform'].cpu().numpy()  # Convert to numpy array
sample_rate = audio['sample_rate']

# Converting to mono:
audio_mono = audio_np.squeeze(0).mean(axis=0)
# Result: 1D numpy array with shape (num_samples,)
